<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
      	      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
              http://www.springframework.org/schema/aop
              http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context-4.0.xsd  
              http://www.springframework.org/schema/tx
              http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
			  http://www.springframework.org/schema/util
			  http://www.springframework.org/schema/util/spring-util-2.0.xsd
			    http://www.springframework.org/schema/data/jpa
     http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
	default-lazy-init="false">
	
	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<context:annotation-config />
	<context:component-scan base-package="com.springdata" />

 <!-- 重要配置：启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="com.springdata.jpa.dao"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${mysql.driver}</value>
		</property>

		<property name="url">
			<value>${mysql.url}</value>
		</property>

		<property name="username">
			<value>${mysql.username}</value>
		</property>

		<property name="password">
			<value>${mysql.password}</value>
		</property>

		<property name="initialSize">
			<value>${mysql.initialSize}</value>
		</property>

		<property name="maxActive">
			<value>${mysql.maxActive}</value>
		</property>

		<property name="minIdle">
			<value>${mysql.maxActive}</value>
		</property>

		<property name="maxIdle">
			<value>${mysql.maxActive}</value>
		</property>

		<property name="maxWait">
			<value>${mysql.maxWait}</value>
		</property>

		<property name="testOnBorrow">
			<value>${mysql.testOnBorrow}</value>
		</property>

		<property name="testWhileIdle">
			<value>${mysql.testWhileIdle}</value>
		</property>

	</bean>

<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.springdata" />
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
		<property name="jpaProperties">
			<props>
				<!-- 设置注释命名策略 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<!-- <prop key="hibernate.show_sql">true</prop> -->
				<prop key="hibernate.format_sql">true</prop>  
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<!-- 自动创建|更新|验证数据库表结构 validate 加载hibernate时，验证创建数据库表结构 create 每次加载hibernate，重新创建数据库表结构 
					create-drop 加载hibernate时创建，退出是删除表结构 update 加载hibernate自动更新数据库结构 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 解决session关闭问题 -->
				<prop key="hibernate.enable_lazy_load_no_trans">true</prop>

				<!-- <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop> -->
				<!-- <prop key="hibernate.cache.provider_configuration_file_resource_path">classpath*:ehcache.xml</prop> -->
				<!-- 启动"查询缓存"如果想缓存使用findall()、list()、Iterator()、createCriteria()、createQuery()等方法获得的数据结果集,必须配置此项 -->
				<!-- <prop key="hibernate.cache.use_query_cache">true</prop>
				开启二级缓存
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				强制Hibernate以更人性化的格式将数据存入二级缓存
				<prop key="hibernate.cache.use_structured_entries">true</prop>
				Hibernate将收集有助于性能调节的统计数据
				<prop key="hibernate.generate_statistics">true</prop> -->
			</props>
		</property>
	</bean>
   <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory">
			<ref bean="entityManagerFactory" />
		</property>
	</bean>

	<!-- 使用注解模式 配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

    
    <!-- Hibernate对Jpa的实现 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

</beans>